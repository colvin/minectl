## minectl/minectl.conf - configuration file

## Copyright (c) 2014, Colvin Wellborn (GROND)
## see the LICENSE included in the distribution for terms

################################################################
## Boolean variables are set using 'yes' or 'no'
##   'YES' or 'Y' or 'y' or anything else will not work
################################################################

################################################################
## Must have several environment variables set:
##   MINECTL_HOME - the minectl script directory
##   MINECTL_CONF - the minectl configuration directory
##   MINESRV_BASE - the base directory of the minecraft server
##   MINERUN_BASE - the base directory of the run statistics
################################################################
## Core variables - can be statically defined
skripDIR="/opt/minectl"
srvBASE="/srv/minecraft"
runDIR="/var/minectl"
################################################################
## Set name of unprivileged mincraft user
mineUSER="minecrafter"
################################################################
## Basic directories - don't change these
jarsDIR="${srvBASE}/jar"   # Contains the minecraft_server file
srvsDIR="${srvBASE}/srv"   # Contains the worlds
skelDIR="${srvBASE}/skel"  # Provides a skeleton world configuration
################################################################
## Allow output colorization
output_colors="no"
################################################################
## Logging configuration
#
## minectl logging directory
logDIR="${runDIR}/log"
# logDIR="/some/path"
### minectl logging file
logFILE="${logDIR}/main.log"
################################################################
## 'stop' subcommand preferences
finalBK="yes"	     # Create backup of world after server exit
finalMAP="no"        # Create map rendering after server exit
################################################################
## 'destroy' subcommand preferences
ultBK="yes"	     # Create backup before deleting world/server
################################################################
## minectld config - minectl daemon
daemon_enable="yes"  # Use the minectld daemon
daemon_debug="no"	 # Turn on daemon debugging
debugFILE="${logDIR}/daemon-debug.log"
daemon_log="yes"     # Log daemon operations to log file
dlogFILE="${logDIR}/daemon-info.log" # Daemon log file
## Turn on/off daemon functions
defaultALL="no"		# Start all four services by default (trumps following vars)
defaultCHECK="yes"	# Monitor server to ensure it is running
defaultSAVE="yes"	# Automatically issue server save command
defaultBK="yes"		# Automatically create backup archives
defaultMAP="no"		# Automatically generate map renderings !!(experimental)!!
## minectld durations
#    Units are in seconds
#    Duration should be divisible by timeBASE
#    Durations should ideally factor into each other
#    Map generation can take a long time, depending on world size
#     Don't make this run too often
timeBASE="5"		# Sleeps this long before checking if it needs to run an op
timeCHECK="60"		# Duration between run checks (60 / 1min)
timeSAVE="600"		# Duration between saves (600 / 10min)
timeBK="43200"		# Duration between archives (43200 / 12h)
timeMAP="86400"		# Duration between map renderings (86400 / 24h)
################################################################
## Daemon 'check' operation config
#
## Kill the daemon if the server has crashed (recommended)
die_if_crashed="yes"
## Script that is run if a server fails the check operation (it isn't running, but should be)
checkCMD='echo'
################################################################
## Backup directories
#    Creates an array
#    Increment the array index by 1 when adding new location
#    No trailing slash
bkDIR[0]="${srvBASE}/bk"
# bkDIR[1]="/some/directory"
# bkDIR[2]="/some/other/directory"
## Method used to manage backup thresholds
#    Point at which oldest backups begin being deleted
#      num  - Once maximum number of backups is breached
#      none - Keep all backups
#  **This is a future feature that is not yet implemented**
# bk_manage_method="num"
## num threshold
# bk_manage_num="100"
################################################################
## Map generation settings
#
map_workDIR="${srvBASE}/map/work" # Working copy of world
map_outDIR="${srvBASE}/map/out"   # Output directory
# Uses rsync if "yes" (and rsync is installed), cp if "no"
map_use_rsync="yes"
## Optional arguments to overviewer
#    overviewer_args="--rendermodes=BLAHBLAHBLAH --config=BLAH"
overviewer_args=""
## Can optionally run an external script after finishing the
#    map generation, to do things like upload the output to
#    a web server
do_post_map="no"
post_map_cmd='sync-map ${worldNAME}'
################################################################
## 'create' subcommand settings
#
## Mode
#   manual - open server.properties in editor
#   auto   - interactively ask for basic parameters
defaultCREATE="auto"
## Port number starting points
create_start_srv_port="25565"   # Default Minecraft port is 25565
create_start_rcon_port="25575"  # 10 higher, yielding 11 available servers
## Set editor for server.properties editing
#    Defaults to EDITOR if it's set, vi if not
if [ -n "$EDITOR" ];then
   mineEDITOR="$EDITOR"
else
   mineEDITOR="vi"
fi
################################################################
